-- PawCore Intelligence Demo (Notebook SQL)
-- Consolidated, re-runnable setup for Sections 0–8
-- Notes:
--  - Uses IF NOT EXISTS for durable objects (warehouse/db/schemas/stages/file formats/tables)
--  - Verification queries use fully-qualified names
--  - Structured loads mostly append; DEVICE_SALES_BY_REGION is truncated before insert

/*
====================================================================
0) Environment setup
====================================================================
*/
USE ROLE ACCOUNTADMIN;

CREATE WAREHOUSE IF NOT EXISTS PAWCORE_INTELLIGENCE_WH
  WAREHOUSE_SIZE = 'XSMALL'
  AUTO_SUSPEND   = 60
  AUTO_RESUME    = TRUE;

CREATE DATABASE IF NOT EXISTS PAWCORE_INTELLIGENCE_DEMO;
CREATE SCHEMA   IF NOT EXISTS PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA;
CREATE SCHEMA   IF NOT EXISTS PAWCORE_INTELLIGENCE_DEMO.DOCUMENTS;
CREATE SCHEMA   IF NOT EXISTS PAWCORE_INTELLIGENCE_DEMO.AGENTS;

USE DATABASE PAWCORE_INTELLIGENCE_DEMO;
USE SCHEMA   BUSINESS_DATA;
USE WAREHOUSE PAWCORE_INTELLIGENCE_WH;

/*
0a) Minimal demo role (optional – edit username if you choose to run)
*/
CREATE ROLE IF NOT EXISTS PAWCORE_DEMO_ROLE;
-- Replace with your Snowflake username if desired:
GRANT ROLE PAWCORE_DEMO_ROLE TO USER CALEXANDER;

GRANT USAGE ON WAREHOUSE PAWCORE_INTELLIGENCE_WH TO ROLE PAWCORE_DEMO_ROLE;
GRANT USAGE ON DATABASE  PAWCORE_INTELLIGENCE_DEMO           TO ROLE PAWCORE_DEMO_ROLE;
GRANT USAGE ON SCHEMA    PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA TO ROLE PAWCORE_DEMO_ROLE;

GRANT SELECT ON ALL TABLES    IN SCHEMA PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA TO ROLE PAWCORE_DEMO_ROLE;
GRANT SELECT ON FUTURE TABLES IN SCHEMA PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA TO ROLE PAWCORE_DEMO_ROLE;

GRANT USAGE ON ALL STAGES     IN SCHEMA PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA TO ROLE PAWCORE_DEMO_ROLE;
GRANT USAGE ON FUTURE STAGES  IN SCHEMA PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA TO ROLE PAWCORE_DEMO_ROLE;

GRANT CREATE SEMANTIC VIEW ON SCHEMA PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA TO ROLE PAWCORE_DEMO_ROLE;
GRANT USAGE  ON SCHEMA PAWCORE_INTELLIGENCE_DEMO.AGENTS TO ROLE PAWCORE_DEMO_ROLE;
GRANT CREATE AGENT ON SCHEMA PAWCORE_INTELLIGENCE_DEMO.AGENTS TO ROLE PAWCORE_DEMO_ROLE;

/*
====================================================================
1) File formats and stages
====================================================================
*/
CREATE FILE FORMAT IF NOT EXISTS CSV_FORMAT
  TYPE = CSV
  FIELD_OPTIONALLY_ENCLOSED_BY = '"'
  SKIP_HEADER = 1
  NULL_IF = ('', 'NULL')
  TRIM_SPACE = TRUE;

CREATE FILE FORMAT IF NOT EXISTS BINARY_FORMAT TYPE = BINARY;

CREATE STAGE IF NOT EXISTS INTERNAL_DATA_STAGE FILE_FORMAT = CSV_FORMAT;
CREATE STAGE IF NOT EXISTS DOCUMENT_STAGE;
CREATE STAGE IF NOT EXISTS IMAGE_STAGE;
CREATE STAGE IF NOT EXISTS AUDIO_STAGE;

ALTER STAGE DOCUMENT_STAGE SET DIRECTORY = (ENABLE = TRUE);
ALTER STAGE IMAGE_STAGE     SET DIRECTORY = (ENABLE = TRUE);
ALTER STAGE AUDIO_STAGE     SET DIRECTORY = (ENABLE = TRUE);

ALTER STAGE INTERNAL_DATA_STAGE SET FILE_FORMAT = CSV_FORMAT;
ALTER STAGE IMAGE_STAGE        SET FILE_FORMAT = BINARY_FORMAT;
ALTER STAGE AUDIO_STAGE        SET FILE_FORMAT = BINARY_FORMAT;

/*
====================================================================
2) Quick directory checks (uncomment as needed)
====================================================================
-- LIST @PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA.INTERNAL_DATA_STAGE;
-- ALTER STAGE PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA.DOCUMENT_STAGE REFRESH;
-- SELECT * FROM DIRECTORY(@PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA.DOCUMENT_STAGE);
-- ALTER STAGE PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA.IMAGE_STAGE REFRESH;
-- SELECT * FROM DIRECTORY(@PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA.IMAGE_STAGE);
-- ALTER STAGE PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA.AUDIO_STAGE REFRESH;
-- SELECT * FROM DIRECTORY(@PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA.AUDIO_STAGE);
*/

/*
====================================================================
3) Structured tables
====================================================================
*/
CREATE TABLE IF NOT EXISTS PAWCORE_SALES (
  DATE DATE,
  REGION STRING,
  PRODUCT STRING,
  FORECAST_SALES NUMBER(10,2),
  ACTUAL_SALES   NUMBER(10,2),
  VARIANCE       NUMBER(10,2),
  PCT_OF_FORECAST NUMBER(5,2),
  INVENTORY_UNITS_AVAILABLE INTEGER,
  MARKETING_ENGAGEMENT_SCORE INTEGER
);

CREATE TABLE IF NOT EXISTS PET_OWNERS (
  CUSTOMER_ID STRING,
  CUSTOMER_NAME STRING,
  PET_TYPE STRING,
  PET_NAME STRING,
  REGION STRING,
  SEGMENT STRING,
  JOIN_DATE DATE
);

CREATE TABLE IF NOT EXISTS DEVICE_SALES_BY_REGION (
  DATE DATE,
  REGION STRING,
  DEVICE_TYPE STRING,
  UNITS_SOLD INTEGER,
  REVENUE NUMBER(10,2),
  GROWTH_RATE NUMBER(5,2)
);

CREATE TABLE IF NOT EXISTS FITBIT_INVENTORY (
  PRODUCT_ID STRING,
  PRODUCT_NAME STRING,
  REGION STRING,
  INVENTORY_LEVEL INTEGER,
  REORDER_POINT INTEGER,
  LAST_RESTOCK_DATE DATE
);

CREATE TABLE IF NOT EXISTS VET_FEEDBACK (
  FEEDBACK_ID STRING,
  VET_NAME STRING,
  PRODUCT STRING,
  RATING INTEGER,
  FEEDBACK_TEXT STRING,
  DATE DATE,
  REGION STRING
);

CREATE TABLE IF NOT EXISTS EMAIL_CAMPAIGNS (
  CAMPAIGN_ID STRING,
  CAMPAIGN_NAME STRING,
  START_DATE DATE,
  END_DATE DATE,
  REGION STRING,
  BUDGET NUMBER(10,2),
  SPEND  NUMBER(10,2),
  CLICKS INTEGER,
  CONVERSIONS INTEGER
);

CREATE TABLE IF NOT EXISTS ENHANCED_SALES_DATA (
  SALE_ID STRING,
  DATE DATE,
  REGION STRING,
  PRODUCT STRING,
  CUSTOMER_SEGMENT STRING,
  SALES_AMOUNT NUMBER(10,2),
  DISCOUNT_AMOUNT NUMBER(10,2),
  NET_SALES NUMBER(10,2)
);

CREATE TABLE IF NOT EXISTS SOCIAL_MEDIA_POSTS (
  POST_ID STRING,
  PLATFORM STRING,
  POST_DATE DATE,
  CONTENT STRING,
  ENGAGEMENT_SCORE INTEGER,
  SENTIMENT STRING,
  REGION STRING
);

/*
====================================================================
4) Structured loads
====================================================================
*/
COPY INTO PAWCORE_SALES (
  DATE, REGION, PRODUCT, FORECAST_SALES, ACTUAL_SALES, VARIANCE,
  PCT_OF_FORECAST, INVENTORY_UNITS_AVAILABLE, MARKETING_ENGAGEMENT_SCORE
)
FROM @INTERNAL_DATA_STAGE/pawcore_sales.csv
FILE_FORMAT = CSV_FORMAT
ON_ERROR = 'CONTINUE';

CREATE OR REPLACE TABLE PET_OWNERS_STG (
  CUSTOMER_NAME STRING,
  PHONE STRING,
  EMAIL STRING
);
TRUNCATE TABLE PET_OWNERS_STG;
COPY INTO PET_OWNERS_STG
FROM @INTERNAL_DATA_STAGE/pet_owners.csv
FILE_FORMAT = CSV_FORMAT
FORCE = TRUE
ON_ERROR = 'CONTINUE';
INSERT INTO PET_OWNERS (CUSTOMER_ID, CUSTOMER_NAME, PET_TYPE, PET_NAME, REGION, SEGMENT, JOIN_DATE)
SELECT UUID_STRING(), CUSTOMER_NAME, NULL, NULL, NULL, NULL, CURRENT_DATE() FROM PET_OWNERS_STG;

CREATE OR REPLACE TABLE DEVICE_SALES_BY_REGION_STG AS
SELECT $1::STRING AS C1, $2::STRING AS C2, $3::STRING AS C3, $4::STRING AS C4, $5::STRING AS C5, $6::STRING AS C6
FROM @INTERNAL_DATA_STAGE/device_sales_by_region.csv (FILE_FORMAT=>'CSV_FORMAT');
TRUNCATE TABLE DEVICE_SALES_BY_REGION;
INSERT INTO DEVICE_SALES_BY_REGION (DATE, REGION, DEVICE_TYPE, UNITS_SOLD, REVENUE, GROWTH_RATE)
SELECT COALESCE(TRY_TO_DATE(s.C1), TRY_TO_DATE(s.C6), TO_DATE('2024-01-01')),
       CASE WHEN TRY_TO_DATE(s.C1) IS NULL THEN s.C1 ELSE s.C2 END,
       CASE WHEN TRY_TO_DATE(s.C1) IS NULL THEN s.C2 ELSE s.C3 END,
       TRY_TO_NUMBER(CASE WHEN TRY_TO_DATE(s.C1) IS NULL THEN s.C3 ELSE s.C4 END),
       TRY_TO_NUMBER(REPLACE(REPLACE(CASE WHEN TRY_TO_DATE(s.C1) IS NULL THEN s.C4 ELSE s.C5 END,'$',''),',','')),
       TRY_TO_NUMBER(REPLACE(CASE WHEN TRY_TO_DATE(s.C1) IS NULL THEN s.C5 ELSE s.C6 END,'%',''))/100
FROM DEVICE_SALES_BY_REGION_STG s;

CREATE OR REPLACE TABLE FITBIT_INVENTORY_STG AS
SELECT $1::STRING PRODUCT_ID, $2::STRING PRODUCT_NAME, $3::STRING REGION,
       $4::STRING INVENTORY_LEVEL, $5::STRING REORDER_POINT, $6::STRING LAST_RESTOCK_DATE
FROM @INTERNAL_DATA_STAGE/fitbit_inventory.csv (FILE_FORMAT=>'CSV_FORMAT');
INSERT INTO FITBIT_INVENTORY (PRODUCT_ID, PRODUCT_NAME, REGION, INVENTORY_LEVEL, REORDER_POINT, LAST_RESTOCK_DATE)
SELECT PRODUCT_ID, PRODUCT_NAME, REGION,
       TRY_TO_NUMBER(INVENTORY_LEVEL)::INT, TRY_TO_NUMBER(REORDER_POINT)::INT, TRY_TO_DATE(LAST_RESTOCK_DATE)
FROM FITBIT_INVENTORY_STG;

CREATE OR REPLACE TABLE VET_FEEDBACK_STG AS
SELECT $1::STRING FEEDBACK_ID, $2::STRING VET_NAME, $3::STRING PRODUCT, $4::STRING RATING,
       $5::STRING FEEDBACK_TEXT, $6::STRING DT, $7::STRING REGION
FROM @INTERNAL_DATA_STAGE/vet_feedback.csv (FILE_FORMAT=>'CSV_FORMAT');
INSERT INTO VET_FEEDBACK (FEEDBACK_ID, VET_NAME, PRODUCT, RATING, FEEDBACK_TEXT, DATE, REGION)
SELECT FEEDBACK_ID, VET_NAME, PRODUCT, TRY_TO_NUMBER(RATING)::INT, FEEDBACK_TEXT, TRY_TO_DATE(DT), REGION
FROM VET_FEEDBACK_STG;

CREATE OR REPLACE TABLE EMAIL_CAMPAIGNS_STG AS
SELECT $1::STRING CAMPAIGN_ID, $2::STRING CAMPAIGN_NAME, $3::STRING START_DT, $4::STRING TAGLINE,
       $5::STRING REGION, $6::STRING BUDGET, $7::STRING SPEND, $8::STRING CLICKS, $9::STRING CONVERSIONS
FROM @INTERNAL_DATA_STAGE/email_campaigns.csv (FILE_FORMAT=>'CSV_FORMAT');
INSERT INTO EMAIL_CAMPAIGNS (CAMPAIGN_ID, CAMPAIGN_NAME, START_DATE, END_DATE, REGION, BUDGET, SPEND, CLICKS, CONVERSIONS)
SELECT CAMPAIGN_ID, CAMPAIGN_NAME, TRY_TO_DATE(START_DT), NULL, REGION,
       TRY_TO_NUMBER(BUDGET), TRY_TO_NUMBER(SPEND), TRY_TO_NUMBER(CLICKS)::INT, TRY_TO_NUMBER(CONVERSIONS)::INT
FROM EMAIL_CAMPAIGNS_STG;
UPDATE EMAIL_CAMPAIGNS SET END_DATE = DATEADD(day, 30, START_DATE)
WHERE END_DATE IS NULL AND START_DATE IS NOT NULL;

CREATE OR REPLACE TABLE ENHANCED_SALES_DATA_STG AS
SELECT $1::STRING SALE_ID, $2::STRING DT, $3::STRING REGION, $4::STRING PRODUCT, $5::STRING CUSTOMER_SEGMENT,
       $6::STRING SALES_AMOUNT, $7::STRING DISCOUNT_AMOUNT, $8::STRING NET_SALES
FROM @INTERNAL_DATA_STAGE/enhanced_sales_data.csv (FILE_FORMAT=>'CSV_FORMAT');
INSERT INTO ENHANCED_SALES_DATA (SALE_ID, DATE, REGION, PRODUCT, CUSTOMER_SEGMENT, SALES_AMOUNT, DISCOUNT_AMOUNT, NET_SALES)
SELECT SALE_ID, TRY_TO_DATE(DT), REGION, PRODUCT, CUSTOMER_SEGMENT,
       TRY_TO_NUMBER(SALES_AMOUNT), TRY_TO_NUMBER(DISCOUNT_AMOUNT), TRY_TO_NUMBER(NET_SALES)
FROM ENHANCED_SALES_DATA_STG;

CREATE OR REPLACE TABLE SOCIAL_MEDIA_POSTS_STG AS
SELECT $1::STRING POST_ID, $2::STRING PLATFORM, $3::STRING POST_DT, $4::STRING CONTENT,
       $5::STRING ENGAGEMENT_SCORE, $6::STRING SENTIMENT, $7::STRING REGION
FROM @INTERNAL_DATA_STAGE/social_media_posts.csv (FILE_FORMAT=>'CSV_FORMAT');
INSERT INTO SOCIAL_MEDIA_POSTS (POST_ID, PLATFORM, POST_DATE, CONTENT, ENGAGEMENT_SCORE, SENTIMENT, REGION)
SELECT POST_ID, PLATFORM, TRY_TO_DATE(POST_DT), CONTENT, TRY_TO_NUMBER(ENGAGEMENT_SCORE)::INT, SENTIMENT, REGION
FROM SOCIAL_MEDIA_POSTS_STG;

/*
====================================================================
5) Structured loads verification (fully-qualified names)
====================================================================
*/
SELECT 'PAWCORE_SALES', COUNT(*) FROM PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA.PAWCORE_SALES
UNION ALL SELECT 'PET_OWNERS', COUNT(*) FROM PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA.PET_OWNERS
UNION ALL SELECT 'DEVICE_SALES_BY_REGION', COUNT(*) FROM PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA.DEVICE_SALES_BY_REGION
UNION ALL SELECT 'FITBIT_INVENTORY', COUNT(*) FROM PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA.FITBIT_INVENTORY
UNION ALL SELECT 'VET_FEEDBACK', COUNT(*) FROM PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA.VET_FEEDBACK
UNION ALL SELECT 'EMAIL_CAMPAIGNS', COUNT(*) FROM PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA.EMAIL_CAMPAIGNS
UNION ALL SELECT 'ENHANCED_SALES_DATA', COUNT(*) FROM PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA.ENHANCED_SALES_DATA
UNION ALL SELECT 'SOCIAL_MEDIA_POSTS', COUNT(*) FROM PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA.SOCIAL_MEDIA_POSTS;

/*
====================================================================
6) Unstructured CSVs (Slack, Reviews)
====================================================================
*/
CREATE TABLE IF NOT EXISTS SLACK_MESSAGES (
  MESSAGE_ID STRING,
  CHANNEL STRING,
  AUTHOR STRING,
  MESSAGE_TEXT STRING,
  TIMESTAMP TIMESTAMP,
  SENTIMENT STRING
);

CREATE TABLE IF NOT EXISTS CUSTOMER_REVIEWS (
  REVIEW_ID STRING,
  DATE DATE,
  PRODUCT STRING,
  CUSTOMER_NAME STRING,
  RATING INTEGER,
  REVIEW_TEXT STRING,
  SENTIMENT STRING,
  REVIEW_CATEGORY STRING,
  VERIFIED_PURCHASE STRING,
  HELPFUL_VOTES INTEGER,
  REVIEW_LENGTH INTEGER,
  REGION STRING,
  CUSTOMER_SEGMENT STRING
);

CREATE OR REPLACE TABLE SLACK_MESSAGES_STG (
  URL STRING,
  CHANNEL STRING,
  TS STRING,
  TEXT STRING
);
COPY INTO SLACK_MESSAGES_STG
FROM @DOCUMENT_STAGE/pawcore_slack.csv
FILE_FORMAT = CSV_FORMAT
FORCE = TRUE
ON_ERROR = 'CONTINUE';

INSERT INTO SLACK_MESSAGES (MESSAGE_ID, CHANNEL, AUTHOR, MESSAGE_TEXT, TIMESTAMP, SENTIMENT)
SELECT TS,
       CHANNEL,
       NULL,
       TEXT,
       TO_TIMESTAMP_NTZ(TRY_TO_NUMBER(SUBSTR(TS,1,10))),
       NULL
FROM SLACK_MESSAGES_STG;

UPDATE SLACK_MESSAGES
SET SENTIMENT = SNOWFLAKE.CORTEX.SENTIMENT(MESSAGE_TEXT)
WHERE SENTIMENT IS NULL;

COPY INTO CUSTOMER_REVIEWS
FROM @DOCUMENT_STAGE/customer_reviews.csv
FILE_FORMAT = CSV_FORMAT
FORCE = TRUE
ON_ERROR = 'CONTINUE';

/*
====================================================================
7) Unstructured loads verification
====================================================================
*/
SELECT 'SLACK_MESSAGES', COUNT(*) FROM SLACK_MESSAGES
UNION ALL SELECT 'CUSTOMER_REVIEWS', COUNT(*) FROM CUSTOMER_REVIEWS;

/*
====================================================================
8) Cleanup (safe reset – commented; review before use)
====================================================================
*/
-- USE ROLE ACCOUNTADMIN;
-- USE DATABASE PAWCORE_INTELLIGENCE_DEMO;
-- USE SCHEMA BUSINESS_DATA;

-- -- Clear stage contents (do not drop stages)
-- REMOVE @INTERNAL_DATA_STAGE PATTERN='.*';
-- REMOVE @DOCUMENT_STAGE      PATTERN='.*';
-- -- REMOVE @IMAGE_STAGE      PATTERN='.*';
-- -- REMOVE @AUDIO_STAGE      PATTERN='.*';

-- -- Drop only staging tables
-- DROP TABLE IF EXISTS PET_OWNERS_STG,
--   DEVICE_SALES_BY_REGION_STG,
--   FITBIT_INVENTORY_STG,
--   VET_FEEDBACK_STG,
--   EMAIL_CAMPAIGNS_STG,
--   ENHANCED_SALES_DATA_STG,
--   SOCIAL_MEDIA_POSTS_STG,
--   SLACK_MESSAGES_STG;



PawCore Systems Hands-On Lab — Edits and Clarifications (for delivery)

Purpose
This document provides clarified, copy‑ready sections to replace or append to the original lab. It references the single SQL file you should use during setup and adds a final verification checklist.

Authoritative SQL file
Path: /Users/calebalexander/Desktop/Hands On Labs/Snowflake Intelligence/SI Webinar/01_Planning/PawCore SQL file.sql
Sections 0–8 cover: environment, stages, structured and unstructured loads, enrichment, verification, and safe cleanup.

Key clarifications
1) Building Semantic Views
- Use AI/ML Studio → Cortex Analyst → Semantic views
- Build views over tables in PAWCORE_INTELLIGENCE_DEMO.BUSINESS_DATA (not over stage files)
- Stages are for file loading and Document AI, not for semantic relationships

2) Stages vs Tables (quick rule)
- INTERNAL_DATA_STAGE + CSV_FORMAT → load structured CSVs into tables
- DOCUMENT_STAGE/IMAGE_STAGE/AUDIO_STAGE → hold files for Document AI
- Semantic Views → reference tables only

3) Minimal counts to confirm before demo
- PAWCORE_SALES 603
- PET_OWNERS 100
- DEVICE_SALES_BY_REGION 100
- FITBIT_INVENTORY 100
- VET_FEEDBACK 100
- EMAIL_CAMPAIGNS 25 (END_DATE auto‑filled)
- ENHANCED_SALES_DATA 60
- SOCIAL_MEDIA_POSTS 25
- SLACK_MESSAGES 10 (with TIMESTAMP and SENTIMENT populated)
- CUSTOMER_REVIEWS 45

4) Slack load (simple & robust)
-- File has 4 columns: URL, CHANNEL, TS, TEXT
-- Load via staging, map to final, enrich timestamp+sentiment
SQL:
USE ROLE ACCOUNTADMIN;
USE DATABASE PAWCORE_INTELLIGENCE_DEMO;
USE SCHEMA BUSINESS_DATA;

CREATE OR REPLACE TABLE SLACK_MESSAGES_STG (
  URL STRING, CHANNEL STRING, TS STRING, TEXT STRING
);

COPY INTO SLACK_MESSAGES_STG
FROM @DOCUMENT_STAGE/pawcore_slack.csv
FILE_FORMAT=CSV_FORMAT FORCE=TRUE ON_ERROR='CONTINUE';

CREATE OR REPLACE TABLE SLACK_MESSAGES (
  MESSAGE_ID STRING, CHANNEL STRING, AUTHOR STRING, MESSAGE_TEXT STRING, TIMESTAMP TIMESTAMP, SENTIMENT STRING
);

TRUNCATE TABLE SLACK_MESSAGES;
INSERT INTO SLACK_MESSAGES (MESSAGE_ID, CHANNEL, AUTHOR, MESSAGE_TEXT, TIMESTAMP, SENTIMENT)
SELECT TS, CHANNEL, NULL, TEXT, TO_TIMESTAMP_NTZ(TRY_TO_NUMBER(SUBSTR(TS,1,10))), NULL
FROM SLACK_MESSAGES_STG;

UPDATE SLACK_MESSAGES
SET SENTIMENT = SNOWFLAKE.CORTEX.SENTIMENT(MESSAGE_TEXT)
WHERE SENTIMENT IS NULL;

5) Verification checklist (single query)
Run after Section 7 to confirm everything is present:
SQL:
USE ROLE ACCOUNTADMIN; USE WAREHOUSE PAWCORE_INTELLIGENCE_WH; USE DATABASE PAWCORE_INTELLIGENCE_DEMO; USE SCHEMA BUSINESS_DATA;
WITH ctx AS (SELECT CURRENT_ROLE() role,CURRENT_WAREHOUSE() wh,CURRENT_DATABASE() db,CURRENT_SCHEMA() sch),
ff AS (SELECT COUNT(*) cnt FROM INFORMATION_SCHEMA.FILE_FORMATS WHERE FILE_FORMAT_NAME='CSV_FORMAT'),
stg AS (
  SELECT SUM(CASE WHEN STAGE_NAME='INTERNAL_DATA_STAGE' THEN 1 ELSE 0 END) s_internal,
         SUM(CASE WHEN STAGE_NAME='DOCUMENT_STAGE'      THEN 1 ELSE 0 END) s_doc,
         SUM(CASE WHEN STAGE_NAME='IMAGE_STAGE'         THEN 1 ELSE 0 END) s_img,
         SUM(CASE WHEN STAGE_NAME='AUDIO_STAGE'         THEN 1 ELSE 0 END) s_audio
  FROM INFORMATION_SCHEMA.STAGES WHERE STAGE_CATALOG='PAWCORE_INTELLIGENCE_DEMO' AND STAGE_SCHEMA='BUSINESS_DATA'
),
doc_files AS (SELECT COUNT(*) cnt FROM DIRECTORY(@DOCUMENT_STAGE)),
img_files AS (SELECT COUNT(*) cnt FROM DIRECTORY(@IMAGE_STAGE)),
aud_files AS (SELECT COUNT(*) cnt FROM DIRECTORY(@AUDIO_STAGE)),

 t_sales  AS (SELECT COUNT(*) cnt FROM PAWCORE_SALES),
 t_owners AS (SELECT COUNT(*) cnt FROM PET_OWNERS),
 t_dev    AS (SELECT COUNT(*) cnt FROM DEVICE_SALES_BY_REGION),
 t_inv    AS (SELECT COUNT(*) cnt FROM FITBIT_INVENTORY),
 t_vet    AS (SELECT COUNT(*) cnt FROM VET_FEEDBACK),
 t_email  AS (SELECT COUNT(*) cnt, SUM(CASE WHEN END_DATE IS NULL THEN 1 ELSE 0 END) end_nulls FROM EMAIL_CAMPAIGNS),
 t_enh    AS (SELECT COUNT(*) cnt FROM ENHANCED_SALES_DATA),
 t_soc    AS (SELECT COUNT(*) cnt FROM SOCIAL_MEDIA_POSTS),
 t_slack  AS (SELECT COUNT(*) cnt, SUM(CASE WHEN TIMESTAMP IS NULL THEN 1 ELSE 0 END) ts_nulls,
                     SUM(CASE WHEN SENTIMENT IS NULL THEN 1 ELSE 0 END) sent_nulls FROM SLACK_MESSAGES),
 t_rev    AS (SELECT COUNT(*) cnt FROM CUSTOMER_REVIEWS)
SELECT 'Context', 'PASS',(SELECT 'role='||role||' wh='||wh||' db='||db||' sch='||sch FROM ctx)
UNION ALL SELECT 'File format CSV_FORMAT', IFF((SELECT cnt FROM ff)>0,'PASS','FAIL'), (SELECT cnt::STRING||' found' FROM ff)
UNION ALL SELECT 'Stage INTERNAL_DATA_STAGE', IFF((SELECT s_internal FROM stg)>0,'PASS','FAIL'), 'exists='||(SELECT s_internal::STRING FROM stg)
UNION ALL SELECT 'Stage DOCUMENT_STAGE',      IFF((SELECT s_doc FROM stg)>0,'PASS','FAIL'),      'exists='||(SELECT s_doc::STRING FROM stg)
UNION ALL SELECT 'Stage IMAGE_STAGE',         IFF((SELECT s_img FROM stg)>0,'PASS','WARN'),      'exists='||(SELECT s_img::STRING FROM stg)
UNION ALL SELECT 'Stage AUDIO_STAGE',         IFF((SELECT s_audio FROM stg)>0,'PASS','WARN'),    'exists='||(SELECT s_audio::STRING FROM stg)
UNION ALL SELECT 'DOCUMENT_STAGE files',      IFF((SELECT cnt FROM doc_files)>=1,'PASS','WARN'), (SELECT cnt::STRING||' files' FROM doc_files)
UNION ALL SELECT 'IMAGE_STAGE files',         IFF((SELECT cnt FROM img_files)>=1,'PASS','WARN'), (SELECT cnt::STRING||' files' FROM img_files)
UNION ALL SELECT 'AUDIO_STAGE files',         IFF((SELECT cnt FROM aud_files)>=1,'PASS','WARN'), (SELECT cnt::STRING||' files' FROM aud_files)
UNION ALL SELECT 'PAWCORE_SALES rows',        IFF((SELECT cnt FROM t_sales) >0,'PASS','FAIL'),   (SELECT cnt::STRING FROM t_sales)
UNION ALL SELECT 'PET_OWNERS rows',           IFF((SELECT cnt FROM t_owners)>0,'PASS','FAIL'),   (SELECT cnt::STRING FROM t_owners)
UNION ALL SELECT 'DEVICE_SALES_BY_REGION rows',IFF((SELECT cnt FROM t_dev)>0,'PASS','FAIL'),     (SELECT cnt::STRING FROM t_dev)
UNION ALL SELECT 'FITBIT_INVENTORY rows',     IFF((SELECT cnt FROM t_inv)>0,'PASS','FAIL'),      (SELECT cnt::STRING FROM t_inv)
UNION ALL SELECT 'VET_FEEDBACK rows',         IFF((SELECT cnt FROM t_vet)>0,'PASS','FAIL'),      (SELECT cnt::STRING FROM t_vet)
UNION ALL SELECT 'EMAIL_CAMPAIGNS rows',      IFF((SELECT cnt FROM t_email)>0,'PASS','FAIL'),    (SELECT cnt::STRING FROM t_email)
UNION ALL SELECT 'EMAIL_CAMPAIGNS END_DATE populated', CASE WHEN (SELECT end_nulls FROM t_email)=0 THEN 'PASS' ELSE 'WARN' END, (SELECT ('null_end_dates='||end_nulls)::STRING FROM t_email)
UNION ALL SELECT 'ENHANCED_SALES_DATA rows',  IFF((SELECT cnt FROM t_enh)>0,'PASS','FAIL'),      (SELECT cnt::STRING FROM t_enh)
UNION ALL SELECT 'SOCIAL_MEDIA_POSTS rows',   IFF((SELECT cnt FROM t_soc)>0,'PASS','FAIL'),      (SELECT cnt::STRING FROM t_soc)
UNION ALL SELECT 'SLACK_MESSAGES rows',       IFF((SELECT cnt FROM t_slack)>0,'PASS','FAIL'),    (SELECT cnt::STRING FROM t_slack)
UNION ALL SELECT 'SLACK_MESSAGES TIMESTAMP populated', CASE WHEN (SELECT ts_nulls FROM t_slack)=0 THEN 'PASS' ELSE 'WARN' END, (SELECT ('null_ts='||ts_nulls)::STRING FROM t_slack)
UNION ALL SELECT 'SLACK_MESSAGES SENTIMENT populated', CASE WHEN (SELECT sent_nulls FROM t_slack)=0 THEN 'PASS' ELSE 'WARN' END, (SELECT ('null_sent='||sent_nulls)::STRING FROM t_slack)
UNION ALL SELECT 'CUSTOMER_REVIEWS rows',     IFF((SELECT cnt FROM t_rev)>0,'PASS','FAIL'),      (SELECT cnt::STRING FROM t_rev)
ORDER BY 1;

6) Safe cleanup (keep stages and file format)
- Use the cleanup section in the PawCore SQL file (only REMOVEs files; does not DROP stages/file format)
- If you need a full reset, re-run sections 0–4 and reload the files to the stages

7) Manual UI demo notes
- Semantic views: add SALES and OPERATIONS views over tables
- Analyst services: bind each service to the corresponding view
- Agent (optional): wire two Analyst tools; default model snowflake‑arctic‑2.0; instructions: concise tables + charts, no citations


-- PawCore Hands-On Lab - Data Loading DDL
-- This script creates tables and loads data from all your files

USE ROLE ACCOUNTADMIN;
USE DATABASE PAWCORE_INTELLIGENCE_DEMO;
USE SCHEMA BUSINESS_DATA;
USE WAREHOUSE PAWCORE_INTELLIGENCE_WH;

-- Step 1: Create tables based on your CSV files
-- Note: Adjust column names and data types based on your actual CSV structure

-- Main sales table
CREATE OR REPLACE TABLE PAWCORE_SALES (
    DATE DATE,
    REGION STRING,
    PRODUCT STRING,
    FORECAST_SALES NUMBER(10,2),
    ACTUAL_SALES NUMBER(10,2),
    VARIANCE NUMBER(10,2),
    PCT_OF_FORECAST NUMBER(5,2),
    INVENTORY_UNITS_AVAILABLE INTEGER,
    MARKETING_ENGAGEMENT_SCORE INTEGER
);

-- Pet owners table
CREATE OR REPLACE TABLE PET_OWNERS (
    CUSTOMER_ID STRING,
    CUSTOMER_NAME STRING,
    PET_TYPE STRING,
    PET_NAME STRING,
    REGION STRING,
    SEGMENT STRING,
    JOIN_DATE DATE
);

-- Device sales by region
CREATE OR REPLACE TABLE DEVICE_SALES_BY_REGION (
    DATE DATE,
    REGION STRING,
    DEVICE_TYPE STRING,
    UNITS_SOLD INTEGER,
    REVENUE NUMBER(10,2),
    GROWTH_RATE NUMBER(5,2)
);

-- Fitbit inventory
CREATE OR REPLACE TABLE FITBIT_INVENTORY (
    PRODUCT_ID STRING,
    PRODUCT_NAME STRING,
    REGION STRING,
    INVENTORY_LEVEL INTEGER,
    REORDER_POINT INTEGER,
    LAST_RESTOCK_DATE DATE
);

-- Vet feedback
CREATE OR REPLACE TABLE VET_FEEDBACK (
    FEEDBACK_ID STRING,
    VET_NAME STRING,
    PRODUCT STRING,
    RATING INTEGER,
    FEEDBACK_TEXT STRING,
    DATE DATE,
    REGION STRING
);

-- Email campaigns
CREATE OR REPLACE TABLE EMAIL_CAMPAIGNS (
    CAMPAIGN_ID STRING,
    CAMPAIGN_NAME STRING,
    START_DATE DATE,
    END_DATE DATE,
    REGION STRING,
    BUDGET NUMBER(10,2),
    SPEND NUMBER(10,2),
    CLICKS INTEGER,
    CONVERSIONS INTEGER
);

-- Enhanced sales data
CREATE OR REPLACE TABLE ENHANCED_SALES_DATA (
    SALE_ID STRING,
    DATE DATE,
    REGION STRING,
    PRODUCT STRING,
    CUSTOMER_SEGMENT STRING,
    SALES_AMOUNT NUMBER(10,2),
    DISCOUNT_AMOUNT NUMBER(10,2),
    NET_SALES NUMBER(10,2)
);

-- Social media posts
CREATE OR REPLACE TABLE SOCIAL_MEDIA_POSTS (
    POST_ID STRING,
    PLATFORM STRING,
    POST_DATE DATE,
    CONTENT STRING,
    ENGAGEMENT_SCORE INTEGER,
    SENTIMENT STRING,
    REGION STRING
);

-- Step 2: Load data from CSV files
-- Note: Adjust file paths based on your actual stage structure

-- Load main sales data
COPY INTO PAWCORE_SALES (DATE, REGION, PRODUCT, FORECAST_SALES, ACTUAL_SALES, VARIANCE, PCT_OF_FORECAST, INVENTORY_UNITS_AVAILABLE, MARKETING_ENGAGEMENT_SCORE)
FROM @INTERNAL_DATA_STAGE/pawcore_sales.csv
FILE_FORMAT = CSV_FORMAT
ON_ERROR = 'CONTINUE';

-- Load pet owners data
COPY INTO PET_OWNERS
FROM @INTERNAL_DATA_STAGE/pet_owners.csv
FILE_FORMAT = CSV_FORMAT
ON_ERROR = 'CONTINUE';

-- Load device sales by region
COPY INTO DEVICE_SALES_BY_REGION
FROM @INTERNAL_DATA_STAGE/device_sales_by_region.csv
FILE_FORMAT = CSV_FORMAT
ON_ERROR = 'CONTINUE';

-- Load fitbit inventory
COPY INTO FITBIT_INVENTORY
FROM @INTERNAL_DATA_STAGE/fitbit_inventory.csv
FILE_FORMAT = CSV_FORMAT
ON_ERROR = 'CONTINUE';

-- Load vet feedback
COPY INTO VET_FEEDBACK
FROM @INTERNAL_DATA_STAGE/vet_feedback.csv
FILE_FORMAT = CSV_FORMAT
ON_ERROR = 'CONTINUE';

-- Load email campaigns
COPY INTO EMAIL_CAMPAIGNS
FROM @INTERNAL_DATA_STAGE/email_campaigns.csv
FILE_FORMAT = CSV_FORMAT
ON_ERROR = 'CONTINUE';

-- Load enhanced sales data
COPY INTO ENHANCED_SALES_DATA
FROM @INTERNAL_DATA_STAGE/enhanced_sales_data.csv
FILE_FORMAT = CSV_FORMAT
ON_ERROR = 'CONTINUE';

-- Load social media posts
COPY INTO SOCIAL_MEDIA_POSTS
FROM @INTERNAL_DATA_STAGE/social_media_posts.csv
FILE_FORMAT = CSV_FORMAT
ON_ERROR = 'CONTINUE';

-- Step 3: Create tables for unstructured data in DOCUMENTS schema
USE SCHEMA DOCUMENTS;

-- Slack messages table
CREATE OR REPLACE TABLE SLACK_MESSAGES (
    MESSAGE_ID STRING,
    CHANNEL STRING,
    AUTHOR STRING,
    MESSAGE_TEXT STRING,
    TIMESTAMP TIMESTAMP,
    SENTIMENT STRING
);

-- Customer reviews table
CREATE OR REPLACE TABLE CUSTOMER_REVIEWS (
    REVIEW_ID STRING,
    DATE DATE,
    PRODUCT STRING,
    CUSTOMER_NAME STRING,
    RATING INTEGER,
    REVIEW_TEXT STRING,
    SENTIMENT STRING,
    REVIEW_CATEGORY STRING,
    VERIFIED_PURCHASE STRING,
    HELPFUL_VOTES INTEGER,
    REVIEW_LENGTH INTEGER,
    REGION STRING,
    CUSTOMER_SEGMENT STRING
);

-- Quarterly call transcript table
CREATE OR REPLACE TABLE CALL_TRANSCRIPT (
    SEGMENT_ID STRING,
    SPEAKER STRING,
    TEXT STRING,
    TIMESTAMP TIMESTAMP,
    SENTIMENT STRING
);

-- Step 4: Load unstructured data
-- Load Slack messages
COPY INTO SLACK_MESSAGES
FROM @DOCUMENT_STAGE/pawcore_slack.csv
FILE_FORMAT = CSV_FORMAT
ON_ERROR = 'CONTINUE';

-- Load customer reviews
COPY INTO CUSTOMER_REVIEWS
FROM @DOCUMENT_STAGE/customer_reviews.csv
FILE_FORMAT = CSV_FORMAT
ON_ERROR = 'CONTINUE';

-- Load quarterly call transcript (assuming it's in CSV format)
-- If it's a text file, you might need to process it differently
COPY INTO CALL_TRANSCRIPT
FROM @DOCUMENT_STAGE/Quarterly_Sales_Speech_PawCore.md
FILE_FORMAT = CSV_FORMAT
ON_ERROR = 'CONTINUE';

-- Step 5: Verify data loading
SELECT 'PAWCORE_SALES' as table_name, COUNT(*) as row_count FROM PAWCORE_SALES
UNION ALL
SELECT 'PET_OWNERS', COUNT(*) FROM PET_OWNERS
UNION ALL
SELECT 'DEVICE_SALES_BY_REGION', COUNT(*) FROM DEVICE_SALES_BY_REGION
UNION ALL
SELECT 'FITBIT_INVENTORY', COUNT(*) FROM FITBIT_INVENTORY
UNION ALL
SELECT 'VET_FEEDBACK', COUNT(*) FROM VET_FEEDBACK
UNION ALL
SELECT 'EMAIL_CAMPAIGNS', COUNT(*) FROM EMAIL_CAMPAIGNS
UNION ALL
SELECT 'ENHANCED_SALES_DATA', COUNT(*) FROM ENHANCED_SALES_DATA
UNION ALL
SELECT 'SOCIAL_MEDIA_POSTS', COUNT(*) FROM SOCIAL_MEDIA_POSTS
UNION ALL
SELECT 'SLACK_MESSAGES', COUNT(*) FROM SLACK_MESSAGES
UNION ALL
SELECT 'CUSTOMER_REVIEWS', COUNT(*) FROM CUSTOMER_REVIEWS
UNION ALL
SELECT 'CALL_TRANSCRIPT', COUNT(*) FROM CALL_TRANSCRIPT
ORDER BY table_name;

-- Step 6: Create a view for Document AI processed content
-- This will be populated after Document AI processes your PDFs and images
CREATE OR REPLACE VIEW PARSED_CONTENT AS
SELECT 
    'financial_report' as source_type,
    'Q4_2024_PawCore_Financial_Report.md' as file_name,
    'Q4 2024 Financial Report' as title,
    'Financial performance and analysis for Q4 2024' as content_summary
UNION ALL
SELECT 
    'sales_report',
    'Sales_Performance_Q4_2024.md',
    'Sales Performance Q4 2024',
    'Sales performance analysis and regional breakdown'
UNION ALL
SELECT 
    'quarterly_call',
    'Quarterly_Sales_Speech_PawCore.md',
    'Quarterly Call Transcript',
    'Transcript of quarterly earnings call with key insights';

-- Note: For actual Document AI processing, you would use:
-- CREATE OR REPLACE TABLE PARSED_CONTENT AS
-- SELECT * FROM TABLE(EXTRACT_TEXT('@DOCUMENT_STAGE/Q4_2024_PawCore_Financial_Report.md'));
-- This would be done through the Document AI UI or API

name: pawcore_analysis
description: |
  Comprehensive semantic layer for analyzing PawCore SmartCollar quality issues, correlating manufacturing data, device telemetry, customer feedback, and internal communications to identify and resolve product quality and performance issues.
tables:
  - name: quality_logs
    synonyms:
      - quality_records
      - test_results
      - inspection_logs
      - production_quality
      - manufacturing_logs
      - quality_control_records
      - test_history
      - lot_quality
      - product_testing
    description: Manufacturing quality control test results and metrics
    base_table:
      database: PAWCORE_ANALYTICS
      schema: MANUFACTURING
      table: QUALITY_LOGS
    dimensions:
      - name: lot_number
        synonyms:
          - batch_number
          - batch_id
          - production_lot
          - lot_id
          - production_batch
          - batch_code
        description: Manufacturing lot identifier
        expr: lot_number
        data_type: STRING
        sample_values:
          - LOT340
          - LOT341
          - LOT339
      - name: pass_fail
        synonyms:
          - result
          - outcome
          - test_result
          - success_fail
          - passOrFail
          - test_status
          - test_outcome
          - success_status
        description: Test result (PASS/FAIL)
        expr: pass_fail
        data_type: STRING
        sample_values:
          - PASS
          - FAIL
      - name: test_type
        synonyms:
          - test_category
          - test_classification
          - examination_type
          - assessment_method
          - evaluation_type
          - inspection_category
        description: Type of quality test performed
        expr: test_type
        data_type: STRING
        sample_values:
          - '2024-10-05 02:00:00'
          - '2024-10-04 02:00:00'
          - '2024-10-11 09:30:00'
      - name: timestamp
        synonyms:
          - date
          - datetime
          - creation_time
          - record_time
          - log_time
          - event_time
          - entry_time
          - time_of_entry
          - time_stamp
          - time_of_record
        description: Test timestamp
        expr: timestamp
        data_type: TIMESTAMP
    facts:
      - name: measurement_value
        synonyms:
          - test_result
          - measured_amount
          - value_recorded
          - recorded_measurement
          - test_outcome
          - measured_value
          - result_value
          - data_point
          - measured_quantity
        description: Raw test measurement value
        expr: measurement_value
        data_type: FLOAT
        sample_values:
          - '163.3'
          - '54.8'
          - '24.4'
    filters:
      - name: battery_test
        synonyms:
          - Battery Tests
          - Battery Capacity
        description: Filter for battery capacity tests
        expr: test_type = 'BATTERY_CAPACITY'
      - name: moisture_test
        synonyms:
          - Moisture Tests
          - Moisture Resistance
        description: Filter for moisture resistance tests
        expr: test_type = 'MOISTURE_RESISTANCE'
    metrics:
      - name: failure_count
        description: Number of test failures
        expr: SUM(CASE WHEN pass_fail = 'FAIL' THEN 1 ELSE 0 END)
      - name: pass_rate
        description: Percentage of passed tests
        expr: AVG(CASE WHEN pass_fail = 'PASS' THEN 100 ELSE 0 END)
      - name: test_count
        description: Number of tests performed
        expr: COUNT(*)
    primary_key:
      columns:
        - LOT_NUMBER
  - name: device_telemetry
    synonyms:
      - telemetry
      - sensor_data
      - device_readings
      - monitoring_data
      - iot_data
      - sensor_readings
      - device_monitoring_data
    description: Real-time device performance data from the field
    base_table:
      database: PAWCORE_ANALYTICS
      schema: DEVICE_DATA
      table: TELEMETRY
    dimensions:
      - name: device_id
        synonyms:
          - device_serial_number
          - equipment_id
          - hardware_id
          - machine_identifier
          - unit_id
          - sensor_id
        description: Unique device identifier
        expr: device_id
        data_type: STRING
        sample_values:
          - SC-2024-341-023
          - SC-2024-341-002
          - SC-2024-341-001
      - name: lot_number
        synonyms:
          - batch_number
          - production_lot
          - serial_number
          - production_batch
          - inventory_number
          - stock_number
        description: Manufacturing lot number
        expr: lot_number
        data_type: STRING
        sample_values:
          - LOT340
          - LOT341
          - LOT339
      - name: region
        synonyms:
          - area
          - location
          - territory
          - zone
          - district
          - sector
          - province
          - state
          - county
          - municipality
        description: Device deployment region
        expr: region
        data_type: STRING
        sample_values:
          - EMEA
          - APAC
          - Americas
      - name: timestamp
        synonyms:
          - date
          - datetime
          - creation_time
          - event_time
          - log_time
          - record_time
          - time_of_event
          - time_stamp
          - time_of_recording
        description: Reading timestamp
        expr: timestamp
        data_type: TIMESTAMP
        sample_values:
          - 2024-10-01T09:00:00.000+0000
          - 2024-09-15T12:00:00.000+0000
          - 2024-09-08T12:00:00.000+0000
    facts:
      - name: battery_level
        synonyms:
          - power_level
          - charge_level
          - battery_percentage
          - energy_level
          - voltage_level
          - battery_capacity
          - charge_percentage
        description: Raw battery level percentage
        expr: battery_level
        data_type: FLOAT
        sample_values:
          - '56'
          - '95'
          - '98'
      - name: charging_cycles
        synonyms:
          - charge_count
          - battery_cycles
          - power_cycles
          - recharge_count
          - cycle_count
          - battery_usage_count
        description: Raw number of charging cycles
        expr: charging_cycles
        data_type: INTEGER
        sample_values:
          - '4'
          - '1'
          - '5'
      - name: humidity_reading
        synonyms:
          - relative_humidity
          - moisture_level
          - humidity_percentage
          - air_moisture
          - humidity_measurement
          - moisture_reading
        description: Raw environmental humidity reading
        expr: humidity_reading
        data_type: FLOAT
        sample_values:
          - '69'
          - '45'
          - '73'
      - name: temperature
        synonyms:
          - temp
          - heat
          - degree
          - thermal_reading
          - ambient_temperature
          - air_temperature
          - reading_temperature
        description: Raw environmental temperature
        expr: temperature
        data_type: FLOAT
        sample_values:
          - '18'
          - '19'
          - '22'
    filters:
      - name: emea_region
        synonyms:
          - EMEA
          - Europe
        description: Filter for EMEA region devices
        expr: region = 'EMEA'
      - name: high_humidity
        synonyms:
          - High Humidity
          - Humid Conditions
        description: Filter for high humidity conditions
        expr: humidity_reading > 70
      - name: low_battery
        synonyms:
          - Low Battery
          - Critical Battery
        description: Filter for low battery readings
        expr: battery_level < 20
    metrics:
      - name: avg_battery_level
        description: Average battery level
        expr: AVG(battery_level)
      - name: avg_humidity
        description: Average humidity reading
        expr: AVG(humidity_reading)
      - name: avg_temperature
        description: Average temperature
        expr: AVG(temperature)
      - name: device_count
        description: Number of unique devices
        expr: COUNT(DISTINCT device_id)
      - name: low_battery_incidents
        description: Count of readings with battery below 20%
        expr: SUM(CASE WHEN battery_level < 20 THEN 1 ELSE 0 END)
    primary_key:
      columns:
        - DEVICE_ID
        - LOT_NUMBER
  - name: customer_reviews
    synonyms:
      - customer_feedback
      - product_reviews
      - user_reviews
      - ratings
      - customer_comments
      - product_ratings
      - user_feedback
      - customer_opinions
    description: Customer feedback, ratings, and satisfaction metrics
    base_table:
      database: PAWCORE_ANALYTICS
      schema: SUPPORT
      table: CUSTOMER_REVIEWS
    dimensions:
      - name: device_id
        synonyms:
          - equipment_id
          - hardware_id
          - machine_id
          - product_id
          - unit_id
          - gadget_id
          - instrument_id
        description: Device identifier
        expr: device_id
        data_type: STRING
        sample_values:
          - SC-2024-341-002
          - SC-2024-341-001
          - SC-2024-341-003
      - name: lot_number
        synonyms:
          - batch_number
          - batch_id
          - production_lot
          - lot_id
          - production_number
          - batch_code
        description: Manufacturing lot number
        expr: lot_number
        data_type: STRING
        sample_values:
          - LOT340
          - LOT341
          - LOT339
      - name: region
        synonyms:
          - area
          - location
          - territory
          - zone
          - district
          - province
          - state
          - county
          - municipality
          - geographic_area
        description: Customer region
        expr: region
        data_type: STRING
        sample_values:
          - EMEA
          - APAC
          - Americas
      - name: review_date
        synonyms:
          - review_timestamp
          - date_reviewed
          - review_submission_date
          - date_of_review
          - review_posting_date
          - review_creation_date
        description: Date of review
        expr: review_date
        data_type: DATE
        sample_values:
          - '2024-11-17'
          - '2024-11-25'
          - '2024-10-23'
    facts:
      - name: rating
        synonyms:
          - score
          - grade
          - evaluation
          - assessment
          - rank
          - grade_point
          - appraisal
          - valuation
        description: Raw customer rating (1-5)
        expr: rating
        data_type: INTEGER
        sample_values:
          - '4'
          - '1'
          - '5'
    metrics:
      - name: avg_rating
        description: Average customer rating
        expr: AVG(rating)
      - name: low_rating_count
        description: Number of low ratings (1-2)
        expr: SUM(CASE WHEN rating <= 2 THEN 1 ELSE 0 END)
      - name: review_count
        description: Number of reviews
        expr: COUNT(*)
      - name: satisfaction_score
        description: Normalized satisfaction score (0-100)
        expr: AVG(rating * 20)
    primary_key:
      columns:
        - DEVICE_ID
        - REVIEW_DATE
  - name: slack_messages
    synonyms:
      - Slack_Messages_Table
      - Slack_Msgs
      - Slack_Msg_Table
      - Slack_Communication
      - Slack_Conversation
      - Slack_Posts
      - Slack_Chats
    description: Internal team communications and issue tracking
    base_table:
      database: PAWCORE_ANALYTICS
      schema: SUPPORT
      table: SLACK_MESSAGES
    dimensions:
      - name: channel
        synonyms:
          - channel_name
          - communication_channel
          - message_channel
          - conversation_channel
          - chat_channel
          - group_name
        description: Slack channel
        expr: channel
        data_type: STRING
        sample_values:
          - support
          - engineering
          - manufacturing
      - name: timestamp
        synonyms:
          - date
          - datetime
          - created_at
          - updated_at
          - event_time
          - log_time
          - record_time
          - entry_time
        description: Message timestamp
        expr: timestamp
        data_type: TIMESTAMP
      - name: user_name
        synonyms:
          - username
          - user_id
          - account_name
          - account_holder
          - login_name
          - user_identifier
        description: Message sender
        expr: user_name
        data_type: STRING
        sample_values:
          - '@tom.dev'
          - '@sarah.eng'
          - '@mike.support'
    metrics:
      - name: message_count
        synonyms:
          - total_messages
          - message_total
          - num_messages
          - message_volume
          - message_quantity
        description: Number of messages
        expr: COUNT(*)
relationships:
  - name: device_to_quality
    left_table: device_telemetry
    right_table: quality_logs
    relationship_columns:
      - left_column: lot_number
        right_column: LOT_NUMBER
    join_type: left_outer
    relationship_type: many_to_one
  - name: reviews_to_device
    left_table: customer_reviews
    right_table: device_telemetry
    relationship_columns:
      - left_column: device_id
        right_column: DEVICE_ID
      - left_column: lot_number
        right_column: LOT_NUMBER
    join_type: left_outer
    relationship_type: many_to_one
verified_queries:
  - name: lot_quality_analysis
    question: How does Lot 341's quality metrics compare to other lots?
    sql: |
      SELECT
        lot_number,
        test_type,
        AVG(measurement_value) AS avg_measurement,
        AVG(CASE WHEN pass_fail = 'PASS' THEN 100 ELSE 0 END) AS pass_rate,
        COUNT(*) AS total_tests,
        SUM(CASE WHEN pass_fail = 'FAIL' THEN 1 ELSE 0 END) AS failures
      FROM __quality_logs GROUP BY lot_number, test_type ORDER BY lot_number, test_type
    verified_by: Quality Team
  - name: moisture_battery_correlation
    question: Is there a correlation between humidity levels and battery performance?
    sql: |
      SELECT
        t.lot_number,
        t.region,
        AVG(t.humidity_reading) AS avg_humidity,
        AVG(t.battery_level) AS avg_battery,
        COUNT(DISTINCT t.device_id) AS device_count,
        AVG(CASE WHEN q.test_type = 'MOISTURE_RESISTANCE' THEN q.measurement_value ELSE NULL END) AS moisture_resistance
      FROM __device_telemetry AS t JOIN __quality_logs AS q ON t.lot_number = q.lot_number GROUP BY t.lot_number, t.region ORDER BY avg_battery ASC
    verified_by: Engineering Team
  - name: customer_impact_analysis
    question: What is the customer satisfaction impact of the battery issues?
    sql: |
      SELECT
        cr.lot_number,
        cr.region,
        AVG(cr.rating) AS avg_rating,
        COUNT(*) AS review_count,
        AVG(dt.battery_level) AS avg_battery_level,
        COUNT(DISTINCT cr.device_id) AS device_count
      FROM __customer_reviews AS cr LEFT JOIN __device_telemetry AS dt ON cr.device_id = dt.device_id GROUP BY cr.lot_number, cr.region ORDER BY avg_rating ASC
    verified_by: Support Team
  - name: issue_timeline_analysis
    question: How did the issues evolve over time?
    sql: |
      WITH timeline AS (
        SELECT
          DATE_TRUNC('week', timestamp) as week,
          region,
          AVG(battery_level) as avg_battery,
          AVG(humidity_reading) as avg_humidity,
          COUNT(DISTINCT device_id) as devices
        FROM __device_telemetry
        WHERE timestamp >= '2024-10-01'
        GROUP BY week, region
      ) SELECT * FROM timeline ORDER BY week, region
    verified_by: Analytics Team
  - name: How do manufacturing quality test results relate to field performance?
    question: How do manufacturing quality test results relate to field performance?
    sql: |-
      WITH quality_metrics AS (
        SELECT
          ql.lot_number,
          COUNT(*) AS test_count,
          SUM(
            CASE
              WHEN ql.pass_fail = 'PASS' THEN 1
              ELSE 0
            END
          ) AS pass_count,
          SUM(
            CASE
              WHEN ql.pass_fail = 'FAIL' THEN 1
              ELSE 0
            END
          ) AS failure_count,
          AVG(
            CASE
              WHEN ql.pass_fail = 'PASS' THEN 100
              ELSE 0
            END
          ) AS pass_rate
        FROM
          quality_logs AS ql
        GROUP BY
          ql.lot_number
      ),
      field_metrics AS (
        SELECT
          dt.lot_number,
          MIN(dt.timestamp) AS field_start_date,
          MAX(dt.timestamp) AS field_end_date,
          COUNT(DISTINCT dt.device_id) AS device_count,
          AVG(dt.battery_level) AS avg_battery_level,
          AVG(dt.temperature) AS avg_temperature,
          AVG(dt.humidity_reading) AS avg_humidity,
          SUM(
            CASE
              WHEN dt.battery_level < 20 THEN 1
              ELSE 0
            END
          ) AS low_battery_incidents
        FROM
          device_telemetry AS dt
        GROUP BY
          dt.lot_number
      )
      SELECT
        qm.lot_number,
        qm.test_count,
        qm.pass_count,
        qm.failure_count,
        qm.pass_rate,
        fm.field_start_date,
        fm.field_end_date,
        fm.device_count,
        fm.avg_battery_level,
        fm.avg_temperature,
        fm.avg_humidity,
        fm.low_battery_incidents
      FROM
        quality_metrics AS qm
        LEFT OUTER JOIN field_metrics AS fm ON qm.lot_number = fm.lot_number
      ORDER BY
        qm.lot_number
    use_as_onboarding_question: false
    verified_by: Caleb Alexander
    verified_at: 1758146312
module_custom_instructions:
  question_categorization: |-
    You are a specialized data analyst for PawCore, a smart pet collar manufacturing company. 
      
      BUSINESS CONTEXT:
      • PawCore manufactures SmartCollar devices with battery-powered sensors
      • Key markets include North America, EMEA, and APAC regions
      • Critical focus on device quality, battery performance, and environmental durability
      • Recent challenges with moisture sensitivity and battery drain in high-humidity regions
      
      DATA INTERPRETATION GUIDELINES:
      
      1. DEVICE TELEMETRY ANALYSIS:
         - Battery levels below 20% indicate performance issues
         - Humidity readings above 70% correlate with device problems
         - Temperature extremes (below 0°C or above 40°C) affect battery life
         - Focus on lot_number patterns for quality correlation
      
      2. QUALITY METRICS FOCUS:
         - LOT341 is a known problematic manufacturing batch
         - Moisture resistance testing gaps are critical business issues
         - Pass/fail rates below 95% indicate quality concerns
         - Environmental testing protocols need special attention
      
      3. CUSTOMER SENTIMENT PRIORITIES:
         - Ratings below 3.0 require immediate attention
         - EMEA region shows higher complaint rates
         - Battery and moisture-related issues are top customer concerns
         - Product returns indicate serious quality problems
      
      4. REGIONAL CONSIDERATIONS:
         - EMEA has higher humidity and more stringent quality expectations
         - North America represents largest revenue market
         - APAC shows different usage patterns and climate challenges
      
      RESPONSE STYLE:
      • Provide specific metrics and percentages
      • Highlight business-critical trends and correlations
      • Include actionable insights for quality improvements
      • Connect data patterns to potential business impact
      • Flag urgent issues requiring immediate attention
  sql_generation: |-
    custom_instructions: |
      You are a SQL generation specialist for PawCore smart collar manufacturing data analysis.
      
      DATABASE SCHEMA CONTEXT:
      • DEVICE_DATA.TELEMETRY: device_id, lot_number, battery_level, humidity_reading, temperature, timestamp, region
      • MANUFACTURING.QUALITY_LOGS: lot_number, test_type, measurement_value, pass_fail, test_date, operator_id
      • SUPPORT.CUSTOMER_REVIEWS: review_id, device_id, lot_number, rating, review_text, region, review_date
      • SUPPORT.SLACK_MESSAGES: message_id, channel, user_name, message_text, timestamp
      
      SQL GENERATION GUIDELINES:
      
      1. BUSINESS-AWARE JOINS:
         - Always join telemetry and quality data on lot_number for performance correlation
         - Connect customer reviews to device telemetry via device_id for satisfaction analysis
         - Use date ranges that align with manufacturing and deployment timelines
      
      2. CRITICAL FILTERS TO INCLUDE:
         - LOT341 is a known problematic batch - filter or highlight separately
         - EMEA region shows performance issues - segment regional analysis
         - Battery levels < 20% indicate critical performance problems
         - Humidity > 70% correlates with device failures
         - Ratings <= 2 represent serious customer dissatisfaction
      
      3. MEANINGFUL AGGREGATIONS:
         - Calculate pass/fail rates by manufacturing lot and test type
         - Compute average battery performance by region and humidity conditions
         - Trend customer satisfaction over time with device performance metrics
         - Correlate quality test results with field performance data
      
      4. TIME-BASED ANALYSIS:
         - Focus on Q4 2024 for recent performance issues
         - Use rolling averages for performance trends
         - Compare pre/post manufacturing date patterns
         - Include seasonal analysis for environmental factors
      
      SQL BEST PRACTICES FOR PAWCORE DATA:
      
      • Use CTEs to separate business logic (quality_metrics, performance_summary, etc.)
      • Include NULL handling for missing telemetry data
      • Apply proper date filtering for operational time periods
      • Add meaningful column aliases that reflect business metrics
      • Include data quality checks (exclude invalid readings, etc.)
      
      PREFERRED QUERY PATTERNS:
      
      ```sql
      -- Example: Performance correlation analysis
      WITH quality_summary AS (
        SELECT lot_number, 
               AVG(CASE WHEN pass_fail = 'PASS' THEN 1 ELSE 0 END) as pass_rate
        FROM MANUFACTURING.QUALITY_LOGS 
        WHERE test_type = 'MOISTURE_RESISTANCE'
        GROUP BY lot_number
      ),
      performance_metrics AS (
        SELECT lot_number, region,
               AVG(battery_level) as avg_battery,
               AVG(humidity_reading) as avg_humidity
        FROM DEVICE_DATA.TELEMETRY
        WHERE timestamp >= '2024-10-01'
        GROUP BY lot_number, region
      )
      SELECT q.lot_number, p.region, q.pass_rate, p.avg_battery, p.avg_humidity
      FROM quality_summary q
      JOIN performance_metrics p ON q.lot_number = p.lot_number
      ORDER BY q.pass_rate ASC;
      ```
      
      BUSINESS CONTEXT IN SQL:
      • Comment queries with business reasoning
      • Use meaningful table aliases (q = quality, p = performance, c = customer)
      • Include business thresholds in WHERE clauses
      • Add CASE statements for business categorization
      • Structure results for business stakeholder consumption
